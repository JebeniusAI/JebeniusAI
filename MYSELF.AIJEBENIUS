```
import java.io.*;
import java.net.*;
import java.util.*;

import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;

import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Nesterovs;
import org.nd4j.linalg.lossfunctions.LossFunctions;

public class JebeniusAI {
    public static void main(String[] args) throws Exception {
        StanfordCoreNLP pipeline = new StanfordCoreNLP();

        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
            .seed(123)
            .weightInit(WeightInit.XAVIER)
            .updater(new Nesterovs(0.01))
            .list()
            .layer(0, new DenseLayer.Builder()
                .nIn(10)
                .nOut(20)
                .activation(Activation.RELU)
                .build())
            .layer(1, new OutputLayer.Builder()
                .nIn(20)
                .nOut(10)
                .activation(Activation.SOFTMAX)
                .lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                .build())
            .pretrain(false)
            .backprop(true)
            .build();

        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        model.setListeners(new ScoreIterationListener(1));

        ServerSocket serverSocket = new ServerSocket(8080);
        System.out.println("JebeniusAI-Chatbot gestartet...");

        while (true) {
            Socket socket = serverSocket.accept();
            System.out.println("Neue Verbindung hergestellt...");

            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

            String input;
            while ((input = reader.readLine()) != null) {
                System.out.println("Eingabe: " + input);

                Annotation annotation = new Annotation(input);
                pipeline.annotate(annotation);

                INDArray inputArray = Nd4j.create(new double[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
                INDArray outputArray = model.output(inputArray);

                // Antwort generieren
            }

            socket.close();
        }
    }
}
``````
import java.io.*;
import java.net.*;
import java.util.*;

import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;

import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Nesterovs;
import org.nd4j.linalg.lossfunctions.LossFunctions;

public class JebeniusAI {
    public static void main(String[] args) throws Exception {
        StanfordCoreNLP pipeline = new StanfordCoreNLP();

        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
            .seed(123)
            .weightInit(WeightInit.XAVIER)
            .updater(new Nesterovs(0.01))
            .list()
            .layer(0, new DenseLayer.Builder()
                .nIn(10)
                .nOut(20)
                .activation(Activation.RELU)
                .build())
            .layer(1, new OutputLayer.Builder()
                .nIn(20)
                .nOut(10)
                .activation(Activation.SOFTMAX)
                .lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                .build())
            .pretrain(false)
            .backprop(true)
            .build();

        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        model.setListeners(new ScoreIterationListener(1));

        ServerSocket serverSocket = new ServerSocket(8080);
        System.out.println("JebeniusAI-Chatbot gestartet...");

        while (true) {
            Socket socket = serverSocket.accept();
            System.out.println("Neue Verbindung hergestellt...");

            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

            String input;
            while ((input = reader.readLine()) != null) {
                System.out.println("Eingabe: " + input);

                Annotation annotation = new Annotation(input);
                pipeline.annotate(annotation);

                INDArray inputArray = Nd4j.create(new double[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
                INDArray outputArray = model.output(inputArray);

                // Antwort generieren
            }

            socket.close();
        }
    }
}
``````
import java.io.*;
import java.net.*;
import java.util.*;

import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;

import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Nesterovs;
import org.nd4j.linalg.lossfunctions.LossFunctions;

public class JebeniusAI {
    public static void main(String[] args) throws Exception {
        StanfordCoreNLP pipeline = new StanfordCoreNLP();

        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
            .seed(123)
            .weightInit(WeightInit.XAVIER)
            .updater(new Nesterovs(0.01))
            .list()
            .layer(0, new DenseLayer.Builder()
                .nIn(10)
                .nOut(20)
                .activation(Activation.RELU)
                .build())
            .layer(1, new OutputLayer.Builder()
                .nIn(20)
                .nOut(10)
                .activation(Activation.SOFTMAX)
                .lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                .build())
            .pretrain(false)
            .backprop(true)
            .build();

        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        model.setListeners(new ScoreIterationListener(1));

        ServerSocket serverSocket = new ServerSocket(8080);
        System.out.println("JebeniusAI-Chatbot gestartet...");

        while (true) {
            Socket socket = serverSocket.accept();
            System.out.println("Neue Verbindung hergestellt...");

            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

            String input;
            while ((input = reader.readLine()) != null) {
                System.out.println("Eingabe: " + input);

                Annotation annotation = new Annotation(input);
                pipeline.annotate(annotation);

                INDArray inputArray = Nd4j.create(new double[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
                INDArray outputArray = model.output(inputArray);

                // Antwort generieren
            }

            socket.close();
        }
    }
}
``````
import java.io.*;
import java.net.*;
import java.util.*;

import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;

import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Nesterovs;
import org.nd4j.linalg.lossfunctions.LossFunctions;

public class JebeniusAI {
    public static void main(String[] args) throws Exception {
        StanfordCoreNLP pipeline = new StanfordCoreNLP();

        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
            .seed(123)
            .weightInit(WeightInit.XAVIER)
            .updater(new Nesterovs(0.01))
            .list()
            .layer(0, new DenseLayer.Builder()
                .nIn(10)
                .nOut(20)
                .activation(Activation.RELU)
                .build())
            .layer(1, new OutputLayer.Builder()
                .nIn(20)
                .nOut(10)
                .activation(Activation.SOFTMAX)
                .lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                .build())
            .pretrain(false)
            .backprop(true)
            .build();

        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        model.setListeners(new ScoreIterationListener(1));

        ServerSocket serverSocket = new ServerSocket(8080);
        System.out.println("JebeniusAI-Chatbot gestartet...");

        while (true) {
            Socket socket = serverSocket.accept();
            System.out.println("Neue Verbindung hergestellt...");

            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

            String input;
            while ((input = reader.readLine()) != null) {
                System.out.println("Eingabe: " + input);

                Annotation annotation = new Annotation(input);
                pipeline.annotate(annotation);

                INDArray inputArray = Nd4j.create(new double[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
                INDArray outputArray = model.output(inputArray);

                // Antwort generieren
            }

            socket.close();
        }
    }
}
``````
import java.io.*;
import java.net.*;
import java.util.*;

import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;

import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Nesterovs;
import org.nd4j.linalg.lossfunctions.LossFunctions;

public class JebeniusAI {
    public static void main(String[] args) throws Exception {
        StanfordCoreNLP pipeline = new StanfordCoreNLP();

        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
            .seed(123)
            .weightInit(WeightInit.XAVIER)
            .updater(new Nesterovs(0.01))
            .list()
            .layer(0, new DenseLayer.Builder()
                .nIn(10)
                .nOut(20)
                .activation(Activation.RELU)
                .build())
            .layer(1, new OutputLayer.Builder()
                .nIn(20)
                .nOut(10)
                .activation(Activation.SOFTMAX)
                .lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                .build())
            .pretrain(false)
            .backprop(true)
            .build();

        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        model.setListeners(new ScoreIterationListener(1));

        ServerSocket serverSocket = new ServerSocket(8080);
        System.out.println("JebeniusAI-Chatbot gestartet...");

        while (true) {
            Socket socket = serverSocket.accept();
            System.out.println("Neue Verbindung hergestellt...");

            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

            String input;
            while ((input = reader.readLine()) != null) {
                System.out.println("Eingabe: " + input);

                Annotation annotation = new Annotation(input);
                pipeline.annotate(annotation);

                INDArray inputArray = Nd4j.create(new double[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
                INDArray outputArray = model.output(inputArray);

                // Antwort generieren
            }

            socket.close();
        }
    }
}
``````
import java.io.*;
import java.net.*;
import java.util.*;

import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;

import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Nesterovs;
import org.nd4j.linalg.lossfunctions.LossFunctions;

public class JebeniusAI {
    public static void main(String[] args) throws Exception {
        StanfordCoreNLP pipeline = new StanfordCoreNLP();

        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
            .seed(123)
            .weightInit(WeightInit.XAVIER)
            .updater(new Nesterovs(0.01))
            .list()
            .layer(0, new DenseLayer.Builder()
                .nIn(10)
                .nOut(20)
                .activation(Activation.RELU)
                .build())
            .layer(1, new OutputLayer.Builder()
                .nIn(20)
                .nOut(10)
                .activation(Activation.SOFTMAX)
                .lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                .build())
            .pretrain(false)
            .backprop(true)
            .build();

        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        model.setListeners(new ScoreIterationListener(1));

        ServerSocket serverSocket = new ServerSocket(8080);
        System.out.println("JebeniusAI-Chatbot gestartet...");

        while (true) {
            Socket socket = serverSocket.accept();
            System.out.println("Neue Verbindung hergestellt...");

            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);

            String input;
            while ((input = reader.readLine()) != null) {
                System.out.println("Eingabe: " + input);

                Annotation annotation = new Annotation(input);
                pipeline.annotate(annotation);

                INDArray inputArray = Nd4j.create(new double[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
                INDArray outputArray = model.output(inputArray);

                // Antwort generieren
            }

            socket.close();
        }
    }
}
```
